@page "/"
@inject HttpClient HttpClient

<PageTitle>Dream Dictionary</PageTitle>

<h1 class="text-4xl font-bold text-center mb-8">
	<span class="text-gray-500">မြန်မာ</span> <span class="text-gray-900">အက္ခရာ</span>
</h1>
@if (Dreams.Count == 0)
{
	<div class="grid">
		@{
			List<MyanmarLetter> alphabet = AlphabetGenerator.GetMyanmarAlphabet();
			for (int i = 0; i < alphabet.Count; i++)
			{
				int id = i + 1;
				MyanmarLetter letter = alphabet[i];
				<div class="card" @onclick="() => Detail(letter.Letter)">
					<p class="letter">@letter.Letter</p>
					<p>@letter.Pronunciation</p>
				</div>
			}
		}
	</div>
}
else
{
	<div style="text-align: center;">
		<button type="button" class="back-button" @onclick="Back">Back</button>
	</div>
	<br />
	<div>
		<ul class="list-disc">
			@for (int i = 0; i < Dreams.Count; i++)
			{
				var item = Dreams[i];
				<li class="mb-2">
					@(i + 1).<span class="font-bold">@item.Title</span>
				</li>
			}
		</ul>
	</div>
}
@code {
	public class MyanmarLetter
	{
		public string Letter { get; set; }
		public string Pronunciation { get; set; }
	}

	public class AlphabetGenerator
	{
		public static List<MyanmarLetter> GetMyanmarAlphabet()
		{
			return new List<MyanmarLetter>()
		{
			new MyanmarLetter { Letter = "က", Pronunciation = "ka (gyi)" },
			new MyanmarLetter { Letter = "ခ", Pronunciation = "kha (kway)" },
			new MyanmarLetter { Letter = "ဂ", Pronunciation = "ga (nge)" },
			new MyanmarLetter { Letter = "ဃ", Pronunciation = "ga (gyi)" },
			new MyanmarLetter { Letter = "င", Pronunciation = "nga" },
			new MyanmarLetter { Letter = "စ", Pronunciation = "sa (lone)" },
			new MyanmarLetter { Letter = "ဆ", Pronunciation = "sa (lain)" },
			new MyanmarLetter { Letter = "ဇ", Pronunciation = "za (kwe)" },
			new MyanmarLetter { Letter = "ဈ", Pronunciation = "za (myin swe)" },
			new MyanmarLetter { Letter = "ည", Pronunciation = "nya" },
			new MyanmarLetter { Letter = "ဋ", Pronunciation = "ta\n(ta linn chate)" },
			new MyanmarLetter { Letter = "ဌ", Pronunciation = "hta\n(wun bare)" },
			new MyanmarLetter { Letter = "ဍ", Pronunciation = "da\n(yin gaout)" },
			new MyanmarLetter { Letter = "ဎ", Pronunciation = "da\n(yin moat)" },
			new MyanmarLetter { Letter = "ဏ", Pronunciation = "na (gyi)" },
			new MyanmarLetter { Letter = "တ", Pronunciation = "ta\n(wun pu)" },
			new MyanmarLetter { Letter = "ထ", Pronunciation = "hta\n(hsin htoo)" },
			new MyanmarLetter { Letter = "ဒ", Pronunciation = "da\n(dway)" },
			new MyanmarLetter { Letter = "ဓ", Pronunciation = "da\n(oat chike)" },
			new MyanmarLetter { Letter = "န", Pronunciation = "na (nge)" },
			new MyanmarLetter { Letter = "ပ", Pronunciation = "pa (sout)" },
			new MyanmarLetter { Letter = "ဖ", Pronunciation = "pha\n(wet htoke)" },
			new MyanmarLetter { Letter = "ဗ", Pronunciation = "ba\n(let chike)" },
			new MyanmarLetter { Letter = "ဘ", Pronunciation = "ba (gome)" },
			new MyanmarLetter { Letter = "မ", Pronunciation = "ma" },
			new MyanmarLetter { Letter = "ယ", Pronunciation = "ya (pet let)" },
			new MyanmarLetter { Letter = "ရ", Pronunciation = "ya (gaout)" },
			new MyanmarLetter { Letter = "လ", Pronunciation = "la" },
			new MyanmarLetter { Letter = "ဝ", Pronunciation = "wa" },
			new MyanmarLetter { Letter = "သ", Pronunciation = "tha" },
			new MyanmarLetter { Letter = "ဟ", Pronunciation = "ha" },
			new MyanmarLetter { Letter = "ဠ", Pronunciation = "la gyi" },
			new MyanmarLetter { Letter = "အ", Pronunciation = "ah" }
		};
		}
	}

	public class DreamEntry
	{
		public int Id { get; set; }
		public int GroupId { get; set; }
		public string Title { get; set; } = null!;
	}

	private List<DreamEntry> Dreams = new();
	private List<DreamEntry> AllDreams = new();
	private List<DreamEntry> Heads = new();

	private async Task Detail(string name)
	{
		if (AllDreams.Count == 0)
		{
			string apiEndpointHead = $"data/group.json";
			Heads = await HttpClient.GetFromJsonAsync<List<DreamEntry>>(apiEndpointHead);

			string apiEndpointDetail = $"data/detail.json";
			AllDreams = await HttpClient.GetFromJsonAsync<List<DreamEntry>>(apiEndpointDetail);
		}

		var id = Heads.Where(x => x.Title.Substring(0, 5).Contains(name)).First().GroupId;
		Dreams = AllDreams!.Where(x => x.GroupId == id).ToList()!;
		StateHasChanged();
	}

	private void Back()
	{
		Dreams = new();
		StateHasChanged();
	}
}